def post_detail(request, slug):
    template_name = 'post_detail.html'
    post = get_object_or_404(Post, slug=slug)
    comments = post.comments.filter(approved=True)
    new_comment = None
    # Comment posted
    if request.method == 'POST':
        comment_form = CommentForm(data=request.POST)
        if comment_form.is_valid():

            # Create Comment object but don't save to database yet
            new_comment = comment_form.save(commit=False)
            # Assign the current post to the comment
            new_comment.post = post
            # Save the comment to the database
            new_comment.save()
    else:
        comment_form = CommentForm()

    return render(request, template_name, {'post': post,
                                           'comments': comments,
                                           'new_comment': new_comment,
                                           'comment_form': comment_form})


#def form_valid(self, form):
        #form.instance.author = self.request.user
        #return super().form_valid(form)    
        

#from django.shortcuts import render, redirect
#from .forms import RegisterForm

# Create your views here.
#def register(response):
    #if response.method == "POST":
        #form = RegisterForm(response.POST)
        #if form.is_valid():
            #form.save()
            
        #return redirect('/home')  
    #else:   
        #form = RegisterForm()

    #return render(response, "register.html", {"form": form})



#class LikeView(View):

    #def post(self, request, pk):
        #post = get_object_or_404(Post, pk=pk)

        #if post.likes.filter(id=request.user.id).exists():
            #post.likes.remove(request.user)
        #else:
            #post.likes.add(request.user) 
        #return HttpResponseRedirect('post-detail', args=[str(pk)]) 

class AddLike(View):

    def post(self, request, pk, *args, **kwargs):
        post = Post.objects.get(pk=post-id)

        is_like = False
        for like in post.likes.all():
            if like == request.user:
                is_like = True
                break
        if not is_like: 
            post.likes.add(request.user)
        
        if is_like:
            post.likes.remove(request.user)
    
        
        return HttpResponseRedirect(reverse('post-detail', args=[post-id])) 



        def like_post(request):
    user = request.user
    if request.method == "POST":
        post_id = request.POST.get('post-id')
        post_obj = Post.objects.get(id=post_id)

        if user in post_obj.liked.all():
            post.obj.liked.remove(user)
        else:
            post_obj.liked.add(user)

        like, create = like.objects.get_or_create(user=user, post_id=post_id)

        if not created:
            if like.value == 'Like':
                like.value = 'Unlike'
            else:
                like.value = 'Like'
        like.save()
    return redirect('home') 


    class LikeView(View):
        #def get_success_url(self):
        #return reverse("post-detail", kwargs={"pk": self.kwargs.get("pk")})

    def get(self, request, *args, **kwargs):
        like = Like()
        like.post = get_object_or_404(Post, pk=self.kwargs.get("pk"))
        like.user = self.request.user
        like.save()
        return redirect(self.get_success_url())


 def like(request, post_id):
        if request.method == "POST":
            #make sure user can't like the post more than once. 
            user = User.objects.get(username=request.user.username)
            #find whatever post is associated with like
            post = Post.objects.get(id=post_id)

            newLike = Like(user=user, post=post)
            newLike.alreadyLiked = True

            post.likes += 1
            post.save()
            newLike.save()
            return HttpResponseRedirect(reverse('home'))  

def LikePostView(request, pk):
    post = get_object_or_404(Post, id=pk)
    if request.user in post.likes.all():
        post.likes.remove(request.user)
    else:
        post.likes.add(request.user)
    return HttpResponseRedirect(reverse('post-detail', args=[pk])) 
